#!/bin/sh -e
# shellcheck disable=SC1003

export SAKRAHOME="${SAKRAHOME:-${HOME:?}}"
case "$SAKRAHOME" in -*) exit 1 ;; esac

SAKRADIR="${SAKRADIR:-${HOME:?}/.sakra}"
case "$SAKRADIR" in -*) exit 1 ;; esac

mkdir -p "$SAKRADIR" "$SAKRAHOME"
cd "$SAKRADIR"

TAB=$(printf '\t')

unset -v catchup
while getopts "c" o; do
	case "$o" in c) catchup=1 ;; esac
done
shift $((OPTIND-1))

# This runs in the same context as a user's rc script
defaultrc() {
	if [ ! "$LINK" ] && [ ! "$ENCLOSURE" ]; then
		exit 0
	fi

	target=${ENCLOSURE:-$LINK}

	# Add the file extension, only for enclosures
	if [ "$ENCLOSURE" ]; then
		path=${target##*/}
		ext=${path##*.}

		# Strip URL stuff out
		ext=${ext%%\?*}; ext=${ext%%\#*};
	elif [ "$CONTENT_TYPE" = html ]; then
		ext=html
	fi

	# Sanitize the filename
	filename=$(tr '/' '\\') <<-EOF
		${AUTHOR:+$AUTHOR - }${TITLE:-${TIMESTAMP:-$(date +%c)}}${ext:+.$ext}
	EOF

	mkdir -p "$SAKRAHOME/$FEEDGROUP"
	curl -LSsf -- "$target" > "$SAKRAHOME/$FEEDGROUP/$filename"
}

handle_feed() {
	state="$1"; rc="$2";
	while IFS= read -r item; do
		unset -v TIMESTAMP TITLE LINK CONTENT CONTENT_TYPE GUID AUTHOR ENCLOSURE old
		for field in TIMESTAMP TITLE LINK CONTENT CONTENT_TYPE GUID AUTHOR ENCLOSURE; do
			eval export "$field="'${item%%"$TAB"*}'

			# Skip old entries
			# XXX: what if there isn't a GUID?
			if [ "$field" = GUID ] && grep -Fxqe "$GUID" < "$state"; then
				old=1; break;
			fi

			# stop looking for fields when there aren't any more fields
			case "$item" in *"$TAB"*) ;; *) break ;; esac

			# remove $field from $item
			item=${item#*"$TAB"}
		done

		if [ "$old" ]; then
			continue
		fi

		if [ "$catchup" ]; then
			printf '%s\n' "$GUID" >> "$state"
			continue
		fi

		# Execute rc
		if [ -x "$rc" ]; then
			"$rc" || continue
		elif [ -f "$rc" ]; then
			echo "$rc exists but isn't executable" >&2
			return 1
		else
			(defaultrc) || continue
		fi

		# Mark item as old
		printf '%s\n' "$GUID" >> "$state"
	done
}

for feeds in *.feeds; do
	if [ "$feeds" = '*.feeds' ]; then
		echo 'No feedgroups defined, see the README for usage information' >&2
		exit 1
	fi

	export FEEDGROUP="${feeds%.feeds}"

	# If the user supplied a limited set of feedgroups then skip
	# feedgroups excluded from that set
	if [ "$*" ]; then
		skip=1
		for arg; do
			if [ "$arg" = "$FEEDGROUP" ]; then
				skip=
			fi
		done
		if [ "$skip" ]; then
			continue
		fi
	fi

	rc="./${FEEDGROUP}rc"
	statedir="./${FEEDGROUP}.state"
	mkdir -p "$statedir"

	while read -r feed; do
		[ "$feed" ] || continue # Skip empty lines

		feed=${feed%% *} # Allow for comments after the URL

		# XXX: md5sum (although portable enough) isn't POSIX. Could be
		# replaced by substituting / for \ in the feed URL. Would break
		# all existing sakra setups though :/
		md5=$(md5sum) <<-EOF
			$feed
		EOF
		state="$statedir/${md5%% *}"
		: >> "$state"

		{ curl -LSsf -- "$feed" | sfeed | handle_feed "$state" "$rc"; } || :
	done < "$feeds"
done

