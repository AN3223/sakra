#!/bin/sh -e
# shellcheck disable=SC2086,SC1003

mkdir -p "${SAKRADIR:=${HOME:?}/.sakra}"
cd "$SAKRADIR"

TAB=$(printf '\t')

unset -v catchup
while getopts "c" o; do
	case "$o" in
		c) catchup=1;;
		*) ;;
	esac
done
shift $((OPTIND-1))

# This runs in the same context as a user's rc script
defaultrc() {
	if [ ! "$LINK" ] && [ ! "$ENCLOSURE" ]; then
		exit 0
	fi

	target=${ENCLOSURE:-$LINK}

	mkdir -p "${HOME:?}/$FEEDGROUP"

	# Add the file extension, only for enclosures
	if [ "$ENCLOSURE" ]; then
		path=${target##*/}
		extension=${path##*.}

		# Strip URL stuff out
		extension=${extension%%\?*}
		extension=${extension%%\#*}

		[ "$extension" ] && TITLE="${TITLE}.${extension}"
	fi

	# Sanitize the filename
	filename=$(tr '/' '\\') <<-EOF
		$TITLE
	EOF

	# XXX: it would be nice to have a way for the user to pick a
	# different path
	curl -LSsf -- "$target" > "$HOME/$FEEDGROUP/$filename"
}

handle_feed() {
	state="$1"; rc="$2";
	while read -r item; do
		for field in TIMESTAMP TITLE LINK CONTENT CONTENT_TYPE GUID AUTHOR ENCLOSURE; do
			unset -v "$field"
			eval export "$field="'${item%%"$TAB"*}'
			case "$item" in *"$TAB"*) ;; *)
				break ;;
			esac
			item=${item#*"$TAB"}
		done

		# Skip old entries
		# XXX: what if there isn't a GUID?
		grep -Fxqe "$GUID" < "$state" && continue

		if [ "$catchup" ]; then
			printf '%s\n' "$GUID" >> "$state"
			continue
		fi

		# Execute rc
		if [ -x "$rc" ]; then
			"$rc" || continue
		elif [ -f "$rc" ]; then
			echo "$rc exists but isn't executable" >&2
			return 1
		else
			(defaultrc) || continue
		fi

		# Mark item as old
		printf '%s\n' "$GUID" >> "$state"
	done
}

for feeds in *.feeds; do
	if [ "$feeds" = '*.feeds' ]; then
		echo 'No feedgroups defined, see the README for usage information' >&2
		exit 1
	fi

	export FEEDGROUP="${feeds%.feeds}"

	# If the user supplied a limited set of feedgroups then skip
	# feedgroups excluded from that set
	if [ "$*" ]; then
		skip=1
		for arg; do
			[ "$arg" = "$FEEDGROUP" ] && skip=
		done
		[ "$skip" ] && continue
	fi

	rc="./${FEEDGROUP}rc"
	statedir="./${FEEDGROUP}.state"
	mkdir -p "$statedir"

	while read -r feed; do
		[ "$feed" ] || continue # Skip empty lines

		feed=${feed%% *} # Allow for comments after the URL

		# XXX: md5sum (although portable enough) isn't POSIX. Could be
		# replaced by substituting / for \ in the feed URL. Would break
		# all existing sakra setups though :/
		md5=$(md5sum) <<-EOF
			$feed
		EOF
		state="$statedir/${md5%% *}"
		: >> "$state"

		{ curl -LSsf -- "$feed" | sfeed | handle_feed "$state" "$rc"; } || :
	done < "$feeds"
done

